package search;

import java.util.*;
import java.io.*;

import dictionary.ObjectIterator;
import indexer.Indexer;


/**
 * The user interface for the index structure.
 *
 * This class provides a main program that allows users to search a web
 * site for keywords.  It essentially uses the index structure generated
 * by WebIndex or ListWebIndex, depending on parameters, to do this.
 *
 * To run this, type the following:
 *
 *    % java SearchDriver indexfile list|custom keyword1 [keyword2] [keyword3] ...
 *
 * where indexfile is a file containing a saved index and list or custom indicates index structure.
 *
 */
public class SearchDriver
{
    public static void main(String [] args)
    {
        Vector<String> v=new Vector<String>();
  
  if(args.length<3)
      System.out.println("Usage: java SearchDriver indexfile list|hash keyword1 [keyword2] [keyword3] [...]");
  else
      {
    Indexer w = null;
    
    // Take care to use the right usage of the Index structure
    // hash - Dictionary Structure based on a Hashtable or HashMap from the Java collections 
    // list - Dictionary Structure based on Linked List 
    // myhash - Dictionary Structure based on a Hashtable implemented by the students
    // bst - Dictionary Structure based on a Binary Search Tree implemented by the students
    // avl - Dictionary Structure based on AVL Tree implemented by the students
    if(args[1].equalsIgnoreCase("list") || args[1].equals("hash") || args[1].equals("myhash") || args[1].equals("bst") 
        || args[1].equals("avl"))
    {
        w = new Indexer(args[1]);
    }
    else
    {
      System.out.println("Invalid Indexer mode \n");
    }
    
    try
    {
        FileInputStream indexSource=new FileInputStream(args[0]);
        w.restore(indexSource);
    }
    catch(IOException e)
    {
        System.out.println(e.toString());
    }
    
    for(int i=2;i<args.length;i++)
        v.addElement(args[i]);
    
    ObjectIterator<String> i= w.retrievePages(new ObjectIterator<String>(v));
    System.out.println(i.next()+"00000000000000000000000000000000000000000000000");
    if(i!=null)
    {
    	System.out.println(i.next()+"00000000000000000000000000000000000000000000000");
    	
      ////////////////////////////////////////////////////////////////////
        //  Write your Code here as part of Sorting based on Rank Assignment
        //  
        ///////////////////////////////////////////////////////////////////
      System.out.println("Search complete.");
      System.out.println("---------------\n");
    }
    else
    {
      System.out.println("Search complete.  0  hits found.");
    }
      }
    }
};