import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.io.*;
import java.net.*;

public class Server extends JFrame
{
	private JTextField userText;
	private JTextArea chatWindow;
	private ObjectOutputStream output;
	private ObjectInputStream input;
	private ServerSocket server;
	private Socket connection;

public Server()
{
	super("Sunil's IM");
	userText=new JTextField();
	userText.setEditable(false);
	userText.addActionListener(
			new ActionListener()
			{
				public void actionPerformed(ActionEvent event)
				{
					sendMessage(event.getActionCommand());
					userText.setText("");
				}
			}
			);
	add(userText, BorderLayout.NORTH);
	chatWindow=new JTextArea();
	add(new JScrollPane(chatWindow));
	setSize(300,150);
	setVisible(true);
}

public void StartRunning()
{
	try
	{
		server =new ServerSocket(6789,10);
		while(true)
		{
			try{
				waitForConnection();
				setupStream();
				whileChatting();
			}
			catch (EOFException eofex)
			{
				showMessage("\n Server Ended connection");
			}
			finally 
			{
				closeCrap();
			}
		}
	}catch (IOException ioex)
	{
		ioex.printStackTrace();
	}
}

private void waitForConnection() throws IOException
{
	showMessage("waiting for someone to connect");
	connection=server.accept();
	showMessage("Now connected to "+connection.getInetAddress().getHostName());
}

private void setupStreams() throws IOException
{
	output=new ObjectOutputStream(connection.getOutputStream());
	output.flush();
	input=new ObjectInputStream(connection.getInputStream());
	showMessage("\nStreams are now setup! \n");
}
private void whileChatting() throws IOException
{
	String message="YOur are now connected!";
	sendMessage(message);
	ableToType(true);
	do
	{
		try
		{
			message=(String) input.readObject();
			showMessage("\n"+message);
		}
		catch (ClassNoutFoundException cnfe)
		{
			showMessage("\n WTF");
		}
	}while(!message.equals("CLIENT - END"));
}

private void closeCrap() 
{
	showMessage("\n Closing connection");
	ableToType(false);
	try
	{
		output.close();
		input.close();
		connection.close();
	}
	catch(IOException ioe)
	{
		ioe.printStackTrace();
	}
}

private void sendMessage(String message)
{
	try{
		output.writeObject("SERVER - "+message);
		output.flush();
		showMessage("\nSERVER - "+message);
	}
	catch(IOException ioe)
	{
		chatWindow.append("\nERROR: I cant send that message");
	}
}

private void showMessage(final String text)
{
	SwingUtilities.invokeLater(
				new Runnable()
				{
					public void run()
					{
						chatWindow.append(text);
					}
				}
			);
}

private void ableToType(final boolean tof)
{
	SwingUtilities.invokeLater(
			new Runnable()
			{
				public void run()
				{
					userText.setEditable(tof);
				}
			}
		);
	
}
}
